version: '3.9'                              # Docker Compose 버전을 지정한다.

services:
  db:
    image: postgres:15-alpine               # PostgreSQL 15-alpine 이미지를 사용한다.
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}          # .env 파일의 POSTGRES_DB를 사용한다.
      POSTGRES_USER: ${POSTGRES_USER}      # .env 파일의 POSTGRES_USER를 사용한다.
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # .env 파일의 POSTGRES_PASSWORD를 사용한다.
    volumes:
      - db_data:/var/lib/postgresql/data    # DB 데이터를 영구 저장한다.
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # 필요시 수동 초기화 SQL 작성 가능
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine                   # Redis 7-alpine 이미지를 사용한다.
    ports:
      - '6379:6379'                         # 로컬 6379 포트를 컨테이너로 포워딩한다.
    restart: always

  web:
    build:
      context: .                            # Dockerfile 경로를 현재 디렉토리로 지정한다.
    command: >
      sh -c "cd /app && python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app                              # 현재 디렉토리를 /app에 마운트한다.
    ports:
      - '8000:8000'                         # 로컬 8000 포트를 컨테이너로 포워딩한다.
    env_file:
      - .env                                # .env 파일을 환경변수로 로드한다.
    depends_on:
      - db
      - redis
    restart: always

volumes:
  db_data: {}                               # PostgreSQL 데이터를 저장할 볼륨을 정의한다.